trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: LintAndUnitTest
  jobs:
  - job: LintAndUnitTest
    displayName: 'Lint and Unit Test'
    steps:
    - script: 'echo "Starting Linting"'
      displayName: 'Starting Linting'

    - script: 'chmod +x ./gradlew'
      displayName: 'Grant Execute Permission'

    - script: './gradlew lint'
      displayName: 'Run Linting'

    - script: 'echo "Linting Completed"'
      displayName: 'Linting Completed'

    - script: 'echo "Starting Unit Testing"'
      displayName: 'Starting Unit Testing'

    - script: './gradlew test'
      displayName: 'Run Unit Tests'

    - script: 'echo "Unit Testing Completed"'
      displayName: 'Unit Testing Completed'
 # Add Java Tool Installer task to set JDK version, architecture, and source

    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '17'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
- stage: SonarQubeAnalysis
  displayName: 'SonarQube Analysis'
  jobs:
  - job: SonarQube
    steps:
 # Add Java Tool Installer task to set JDK version, architecture, and source

    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '17'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
    - task: SonarQubePrepare@4
      inputs:
        SonarQube: 'AzurePipeline'  # Use the name of the SonarQube service connection you created.
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'AzureSpringBootPipeline'  # Replace with your project's unique key in SonarQube.
        cliProjectName: 'AzureSpringBootPipeline'  # Replace with your project's name.
        cliSources: '$(Build.SourcesDirectory)'
        extraProperties: |
          sonar.java.binaries=$(Build.SourcesDirectory)/build/classes/java/main
    - script: './gradlew test'  # Run unit tests again (optional but recommended).
    - task: SonarQubeAnalyze@4
    - task: SonarQubePublish@4
      inputs:
        pollingTimeoutSec: '300'

- stage: BuildImage
  jobs:
  - job: BuildDockerImage
    displayName: 'Build Docker Image'
    steps:
    - script: |
        # Clone the GitHub repository containing your Dockerfile
        git clone https://github.com/your-username/your-repo.git cloned-repo

        # Navigate to the cloned repository directory
        cd cloned-repo

        # Build the Docker image
        docker build -t test:01 .

        # Log in to Docker Hub or your container registry
        docker login -u $(DOCKERHUB_USERNAME) -p $(DOCKERHUB_PASSWORD)

        # Push the Docker image to the registry
        docker push zeinsss/test:01

        # Log out of Docker
        docker logout
      displayName: 'Build and Push Docker Image'

- stage: PullImage
  jobs:
  - job: PullDockerImage
    displayName: 'Pull Docker Image'
    steps:
    - script: |
        docker login -u $(DOCKERHUB_USERNAME) -p $(DOCKERHUB_PASSWORD)
        docker pull zeinsss/test:01
        docker logout
      displayName: 'Pull Docker Image'
  